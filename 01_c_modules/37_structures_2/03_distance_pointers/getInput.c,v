head	1.15;
access;
symbols;
locks
	sachin:1.15; strict;
comment	@ * @;


1.15
date	2023.01.05.12.01.54;	author sachin;	state Exp;
branches;
next	1.14;

1.14
date	2023.01.05.11.45.08;	author sachin;	state Exp;
branches;
next	1.13;

1.13
date	2023.01.05.02.43.59;	author sachin;	state Exp;
branches;
next	1.12;

1.12
date	2023.01.05.02.39.37;	author sachin;	state Exp;
branches;
next	1.11;

1.11
date	2023.01.05.02.35.58;	author sachin;	state Exp;
branches;
next	1.10;

1.10
date	2023.01.05.02.31.37;	author sachin;	state Exp;
branches;
next	1.9;

1.9
date	2023.01.05.02.31.11;	author sachin;	state Exp;
branches;
next	1.8;

1.8
date	2023.01.05.02.30.49;	author sachin;	state Exp;
branches;
next	1.7;

1.7
date	2023.01.05.02.30.07;	author sachin;	state Exp;
branches;
next	1.6;

1.6
date	2023.01.05.02.28.15;	author sachin;	state Exp;
branches;
next	1.5;

1.5
date	2023.01.05.02.27.51;	author sachin;	state Exp;
branches;
next	1.4;

1.4
date	2023.01.05.02.25.13;	author sachin;	state Exp;
branches;
next	1.3;

1.3
date	2023.01.05.02.06.29;	author sachin;	state Exp;
branches;
next	1.2;

1.2
date	2023.01.05.02.03.15;	author sachin;	state Exp;
branches;
next	1.1;

1.1
date	2023.01.05.02.00.07;	author sachin;	state Exp;
branches;
next	;


desc
@@


1.15
log
@*** empty log message ***
@
text
@#include"headers.h"
#include"declarations.h"

dis* getInput()
{
    dis *d;

    #ifdef DEBUG
        printf("Start Function: %s\n", __func__);
    #endif

    d = (dis*)malloc(sizeof(dis));
    //allocate space for other two distance structures
    d->dfi = (dis_feet_inch*)malloc(sizeof(dis_feet_inch));
    d->dm = (dis_m_cm*)malloc(sizeof(dis_m_cm));
    d->dfi->ft = (int*)malloc(sizeof(int));
    d->dfi->inch = (int*)malloc(sizeof(int));
    d->dm->m = (int*)malloc(sizeof(int));
    d->dm->cm = (float*)malloc(sizeof(float));
    
    if(d==NULL)
    {
        perror("error");
        exit(EXIT_FAILURE);
    }

    printf("Enter distance in Feet: \n");
    scanf("%d", d->dfi->ft);
    printf("Enter distance in Inches: \n");
    scanf("%d", d->dfi->inch);
    
    #ifdef DEBUG
        printf("Ending Function: %s\n", __func__);
    #endif

    return d;
}@


1.14
log
@*** empty log message ***
@
text
@a19 1
    d->dfi->a = 10;
a26 1
    printf("%d\n",d->dfi->a);
@


1.13
log
@*** empty log message ***
@
text
@d20 2
@


1.12
log
@*** empty log message ***
@
text
@d7 1
a7 2
    dis_feet_inch *dfi;
    dis_m_cm *dm;
d14 6
a19 2
    dfi = (dis_feet_inch*)malloc(sizeof(dis_feet_inch));
    dm = (dis_m_cm*)malloc(sizeof(dis_m_cm));
d25 1
a25 2
    d->dfi = dfi;
    d->dm = dm;
@


1.11
log
@*** empty log message ***
@
text
@d7 2
d14 3
d22 2
a23 1

@


1.10
log
@*** empty log message ***
@
text
@d12 5
a16 7
    printf("Allocted\n");
    // if(d==NULL)
    // {
    //     printf("test\n");
    //     // perror("error");
    //     exit(EXIT_FAILURE);
    // }
d18 2
a19 1
    printf("Enter distande in Feet: \n");
d21 1
a21 1
    printf("Enter distance in Inches: ");
@


1.9
log
@*** empty log message ***
@
text
@d20 1
a20 1
    printf("Enter distande in Feet: ");
@


1.8
log
@*** empty log message ***
@
text
@d13 6
a18 6
    if(d==NULL)
    {
        printf("test\n");
        // perror("error");
        exit(EXIT_FAILURE);
    }
@


1.7
log
@*** empty log message ***
@
text
@d15 1
@


1.6
log
@*** empty log message ***
@
text
@d15 1
a15 1
        perror("error");
@


1.5
log
@*** empty log message ***
@
text
@d12 1
a12 1
    printf("Allocted\n")
@


1.4
log
@*** empty log message ***
@
text
@d12 1
@


1.3
log
@*** empty log message ***
@
text
@d8 1
a8 1
        printf("Start Function: %s", __func__);
d24 1
a24 1
        printf("Ending Function: %s", __func__);
@


1.2
log
@chenged NULL
@
text
@d7 1
a7 1
    #ifdef DEBUBG
d22 4
@


1.1
log
@Initial revision
@
text
@d12 1
a12 1
    if(d==NUll)
@
